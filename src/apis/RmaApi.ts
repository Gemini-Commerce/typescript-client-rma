/* tslint:disable */
/* eslint-disable */
/**
 * RMA Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RmaAddNoteRequest,
  RmaApproveReturnRequest,
  RmaCancelReturnRequest,
  RmaConfirmReturnApproveItemsRequest,
  RmaCreateReturnRequest,
  RmaDeleteNoteRequest,
  RmaEditNoteRequest,
  RmaGetReturnRequest,
  RmaListNotesByReturnIdRequest,
  RmaListNotesByReturnIdResponse,
  RmaListReturnsRequest,
  RmaListReturnsResponse,
  RmaNoteResponse,
  RmaRefundReturnRequest,
  RmaRejectReturnRequest,
  RmaReturnResponse,
  RmaSetReceivedItemsRequest,
  RmaSkipReturnStatusRequest,
  RpcStatus,
} from '../models/index';
import {
    RmaAddNoteRequestFromJSON,
    RmaAddNoteRequestToJSON,
    RmaApproveReturnRequestFromJSON,
    RmaApproveReturnRequestToJSON,
    RmaCancelReturnRequestFromJSON,
    RmaCancelReturnRequestToJSON,
    RmaConfirmReturnApproveItemsRequestFromJSON,
    RmaConfirmReturnApproveItemsRequestToJSON,
    RmaCreateReturnRequestFromJSON,
    RmaCreateReturnRequestToJSON,
    RmaDeleteNoteRequestFromJSON,
    RmaDeleteNoteRequestToJSON,
    RmaEditNoteRequestFromJSON,
    RmaEditNoteRequestToJSON,
    RmaGetReturnRequestFromJSON,
    RmaGetReturnRequestToJSON,
    RmaListNotesByReturnIdRequestFromJSON,
    RmaListNotesByReturnIdRequestToJSON,
    RmaListNotesByReturnIdResponseFromJSON,
    RmaListNotesByReturnIdResponseToJSON,
    RmaListReturnsRequestFromJSON,
    RmaListReturnsRequestToJSON,
    RmaListReturnsResponseFromJSON,
    RmaListReturnsResponseToJSON,
    RmaNoteResponseFromJSON,
    RmaNoteResponseToJSON,
    RmaRefundReturnRequestFromJSON,
    RmaRefundReturnRequestToJSON,
    RmaRejectReturnRequestFromJSON,
    RmaRejectReturnRequestToJSON,
    RmaReturnResponseFromJSON,
    RmaReturnResponseToJSON,
    RmaSetReceivedItemsRequestFromJSON,
    RmaSetReceivedItemsRequestToJSON,
    RmaSkipReturnStatusRequestFromJSON,
    RmaSkipReturnStatusRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface AddNoteRequest {
    body: RmaAddNoteRequest;
}

export interface ApproveReturnRequest {
    body: RmaApproveReturnRequest;
}

export interface CancelReturnRequest {
    body: RmaCancelReturnRequest;
}

export interface ConfirmReturnApproveItemsRequest {
    body: RmaConfirmReturnApproveItemsRequest;
}

export interface CreateReturnRequest {
    body: RmaCreateReturnRequest;
}

export interface DeleteNoteRequest {
    body: RmaDeleteNoteRequest;
}

export interface EditNoteRequest {
    body: RmaEditNoteRequest;
}

export interface GetReturnRequest {
    body: RmaGetReturnRequest;
}

export interface ListNotesByReturnIdRequest {
    body: RmaListNotesByReturnIdRequest;
}

export interface ListReturnsRequest {
    body: RmaListReturnsRequest;
}

export interface RefundReturnRequest {
    body: RmaRefundReturnRequest;
}

export interface RejectReturnRequest {
    body: RmaRejectReturnRequest;
}

export interface SetReceivedItemsRequest {
    body: RmaSetReceivedItemsRequest;
}

export interface SkipReturnStatusRequest {
    body: RmaSkipReturnStatusRequest;
}

/**
 * 
 */
export class RmaApi extends runtime.BaseAPI {

    /**
     * Add a note to an RMA
     */
    async addNoteRaw(requestParameters: AddNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RmaNoteResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/AddNote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaAddNoteRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RmaNoteResponseFromJSON(jsonValue));
    }

    /**
     * Add a note to an RMA
     */
    async addNote(requestParameters: AddNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RmaNoteResponse> {
        const response = await this.addNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Approve a return
     */
    async approveReturnRaw(requestParameters: ApproveReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RpcStatus>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling approveReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/ApproveReturn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaApproveReturnRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RpcStatusFromJSON(jsonValue));
    }

    /**
     * Approve a return
     */
    async approveReturn(requestParameters: ApproveReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RpcStatus> {
        const response = await this.approveReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel a return
     */
    async cancelReturnRaw(requestParameters: CancelReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling cancelReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/CancelReturn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaCancelReturnRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Cancel a return
     */
    async cancelReturn(requestParameters: CancelReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm return approve items
     */
    async confirmReturnApproveItemsRaw(requestParameters: ConfirmReturnApproveItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling confirmReturnApproveItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/ConfirmReturnApproveItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaConfirmReturnApproveItemsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Confirm return approve items
     */
    async confirmReturnApproveItems(requestParameters: ConfirmReturnApproveItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.confirmReturnApproveItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a return
     */
    async createReturnRaw(requestParameters: CreateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RmaReturnResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/CreateReturn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaCreateReturnRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RmaReturnResponseFromJSON(jsonValue));
    }

    /**
     * Create a return
     */
    async createReturn(requestParameters: CreateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RmaReturnResponse> {
        const response = await this.createReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a note from an RMA
     */
    async deleteNoteRaw(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/DeleteNote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaDeleteNoteRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a note from an RMA
     */
    async deleteNote(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit a note on an RMA
     */
    async editNoteRaw(requestParameters: EditNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RmaNoteResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling editNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/EditNote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaEditNoteRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RmaNoteResponseFromJSON(jsonValue));
    }

    /**
     * Edit a note on an RMA
     */
    async editNote(requestParameters: EditNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RmaNoteResponse> {
        const response = await this.editNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a return
     */
    async getReturnRaw(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RmaReturnResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/GetReturn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaGetReturnRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RmaReturnResponseFromJSON(jsonValue));
    }

    /**
     * Get a return
     */
    async getReturn(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RmaReturnResponse> {
        const response = await this.getReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List notes by return id
     */
    async listNotesByReturnIdRaw(requestParameters: ListNotesByReturnIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RmaListNotesByReturnIdResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listNotesByReturnId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/ListNotesByReturnId`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaListNotesByReturnIdRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RmaListNotesByReturnIdResponseFromJSON(jsonValue));
    }

    /**
     * List notes by return id
     */
    async listNotesByReturnId(requestParameters: ListNotesByReturnIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RmaListNotesByReturnIdResponse> {
        const response = await this.listNotesByReturnIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List returns
     */
    async listReturnsRaw(requestParameters: ListReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RmaListReturnsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listReturns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/ListReturns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaListReturnsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RmaListReturnsResponseFromJSON(jsonValue));
    }

    /**
     * List returns
     */
    async listReturns(requestParameters: ListReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RmaListReturnsResponse> {
        const response = await this.listReturnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refund a return
     */
    async refundReturnRaw(requestParameters: RefundReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling refundReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/RefundReturn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaRefundReturnRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Refund a return
     */
    async refundReturn(requestParameters: RefundReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.refundReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reject a return
     */
    async rejectReturnRaw(requestParameters: RejectReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling rejectReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/RejectReturn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaRejectReturnRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reject a return
     */
    async rejectReturn(requestParameters: RejectReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.rejectReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set received items
     */
    async setReceivedItemsRaw(requestParameters: SetReceivedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setReceivedItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/SetReceivedItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaSetReceivedItemsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set received items
     */
    async setReceivedItems(requestParameters: SetReceivedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setReceivedItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Skip a return status
     */
    async skipReturnStatusRaw(requestParameters: SkipReturnStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling skipReturnStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rma.Rma/SkipReturnStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RmaSkipReturnStatusRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Skip a return status
     */
    async skipReturnStatus(requestParameters: SkipReturnStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.skipReturnStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
